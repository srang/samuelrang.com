#!/usr/bin/env bash
#     _ _
# ___(_) |_ ___       _ __ ___   __ _ _ __   __ _  __ _  ___ _ __
#/ __| | __/ _ \_____| '_ ` _ \ / _` | '_ \ / _` |/ _` |/ _ \ '__|
#\__ \ | ||  __/_____| | | | | | (_| | | | | (_| | (_| |  __/ |
#|___/_|\__\___|     |_| |_| |_|\__,_|_| |_|\__,_|\__, |\___|_|
#                                                 |___/

# site-manager
# Used for various activities for managing the blog
###############################################################################
# exit on command errors (so you MUST handle exit codes properly!)
set -e
# pass trap handlers down to subshells
set -E
# capture fail exit codes in piped commands
set -o pipefail
# execution tracing debug messages (for debugging option/input logic)
# set -x

# Program configuration and helpers
###############################################################################

# Check Arch
CMD_ARCH=$(uname -s)

# Error handler
on_err() {
    echo ">> ERROR: $?"
    FN=0
    for LN in "${BASH_LINENO[@]}"; do
        [ "${FUNCNAME[$FN]}" = "main" ] && break
        echo ">> ${BASH_SOURCE[$FN]} $LN ${FUNCNAME[$FN]}"
        FN=$(( FN + 1 ))
    done
}
trap on_err ERR

# Exit handler
declare -a EXIT_CMDS
add_exit_cmd() { EXIT_CMDS+="$*;  "; }
on_exit(){ eval "${EXIT_CMDS[@]}"; }
trap on_exit EXIT

# absolute path to command (used for show_help)
if [[ $CMD_ARCH == 'Darwin' ]]; then
  CMD=$0
else
  CMD="$(readlink -f $0)"
fi

# Defaults and command line options
[ "$VERBOSE" ] ||  VERBOSE=
[ "$QUIET" ]   ||  QUIET=
[ "$DEBUG" ]   ||  DEBUG=
[ "$BUILD" ]   ||  BUILD=0
[ "$SERVE" ]   ||  SERVE=0
[ "$SHTDN" ]   ||  SHTDN=0
[ "$PUBLISH" ] ||  PUBLISH=0
[ "$GOTW" ]    ||  GOTW=0
[ "$DATEFORM" ]||  DATEFORM="%F %T(%Z)"
[ "$OUTPUT" ]  ||  OUTPUT="/tmp/sm.log" # useful for catching errors

# Logging helpers
out() { echo "$(date +"$DATEFORM"): $*" | tee $OUTPUT; }
err() { out "$*" 1>&2; }
vrb() { [ ! "$VERBOSE" ] || out "$@"; }
dbg() { [ ! "$DEBUG" ] || err "$@"; }
die() { err "EXIT: $1" && [ "$2" ] && [ "$2" -ge 0 ] && exit "$2" || exit 1; }

# Show help function to be used below
show_help() {
    awk 'NR>1{print} /^(###|$)/{exit}' "$CMD"
    echo "USAGE: $(basename "$CMD") [options] [command]"
    echo "OPTS:"
    if [[ $CMD_ARCH == 'Darwin' ]]; then
      MSG=$(sed -n '/^## Options/,/-?/p' "$CMD" | sed -e '1d' | sed -e 's/^[[:space:]]*/  /' -e 's/|/, /' -e 's/)//' | grep '^  -')
    else
      MSG=$(sed -n '/^## Options/,/-?/p' "$CMD" | head -n -1 | sed -e 's/^[[:space:]]*/  /' -e 's/|/, /' -e 's/)//' | grep '^  -')
    fi
    EMSG=$(eval "echo \"$MSG\"")
    echo "$EMSG"
    echo "CMDS:"
    if [[ $CMD_ARCH == 'Darwin' ]]; then
      MSG=$(sed -n '/^## Options/,/-?/p' "$CMD" | sed -e '1d' | sed -e 's/^[[:space:]]*/  /' | grep '^  [a-z|]\+) ' | sed -e 's/|/, /'  -e 's/)//' )
    else
      MSG=$(sed -n '/^## Options/,/-?/p' "$CMD" | head -n -1 | sed -e 's/^[[:space:]]*/  /' | grep '^  [a-z|]\+) ' | sed -e 's/|/, /'  -e 's/)//' )
    fi
    EMSG=$(eval "echo \"$MSG\"")
    echo "$EMSG"
}

## Options and arguments
while [[ $# -gt 0 ]]; do
    opt="$1"; shift; #expose next argument
    case "$opt" in
    -h|--help)           # Show this help message
        show_help; exit 0; ;;
    -x|--debug)          # Enable debugging messages (implies verbose)
        DEBUG=$(( DEBUG + 1 )) && VERBOSE="$DEBUG" && DATEFORM='%a %b %d, %r (%Z %:::z)' && out "# INFO: Running in Debug mode"; ;;
    -v|--verbose)        # Enable verbose messages
        VERBOSE=$(( VERBOSE + 1 )) && DATEFORM='%a %b %d, %r (%Z %:::z)' && out "# INFO: Running in Verbose mode"; ;;
    -q|--quiet)          # limit output to major steps and errors
        QUIET=$(( QUIET + 1 )) && exec >$OUTPUT && OUTPUT=$(tty) && out "# INFO: Running in Quiet mode"; ;;
    b|build)             # clean and build site
        BUILD=$(( BUILD + 1 )) && vrb "# INFO: Build will be executed"; ;;
    s|serve)             # build and serve site locally
        SERVE=$(( SERVE + 1 )) && vrb "# INFO: Server will be started"; ;;
    k|shutdown)          # kill local jekyll if running
        SHTDN=$(( SHTDN + 1 )) && vrb "# INFO: Server will be shutdown"; ;;
    p|publish)           # publish blog to github
        PUBLISH=$(( PUBLISH + 1 )) && vrb "# INFO: Site will be published"; ;;
    ng|gotw)             # create a new Game of the Week draft post, arg1: Week #, arg2: yyyy-mm-dd, arg3: team1, arg4: team2
        GOTW=$(( GOTW + 1 )) && GOTW_WEEK=$1 && GOTW_DATE=$2 && GOTW_TEAM1=$3 && GOTW_TEAM2=$4 \
                             && shift 4 && vrb "# INFO: GOTW Draft will be created"; ;;
    -?)                   # handle invalid options
        die "# ERROR: Invalid option supplied: '$opt'. Execute '$(basename $CMD)' -h for usage information"; ;;
    help)                # build and serve site locally
        show_help; exit 0; ;;
    *)                   # handle invalid commands
        die "# ERROR: Invalid command supplied: '$opt'. Execute '$(basename $CMD)' -h for usage information"; ;;
esac; done

# Program execution
###############################################################################

setup() {
    gem install bundler jekyll
}

build() {
    out "# INFO: Initiating build"
    vrb "# INFO: Cleaning"
    bundle exec jekyll clean
    vrb "# INFO: Updating bundles"
    bundle update
    vrb "# INFO: Executing build"
    bundle exec jekyll build
}

shutdown() {
    SVR_PID=$(pgrep -a ruby | grep jekyll | awk '{ print $1 }') || err '# WARN: Server PID not found. Likely server is not running'
    if [ $SVR_PID ]; then
        vrb "# INFO: found Server PID '$SVR_PID', attempting to shutdown"
        kill -15 $SVR_PID
    fi
}

# don't start debugging until after inputs are parsed
[ "$DEBUG" ]  &&  set -x

# Clean, update, build site
if [ $BUILD -gt 0 ]; then
    build
fi

# Start development server
if [ $SERVE -gt 0 ]; then
    out "# INFO: Serving"
    bundle exec jekyll serve --drafts &
fi

# Shutdown development server
if [ $SHTDN -gt 0 ]; then
    out "# INFO: Killing server"
    shutdown
fi

# Publish if master branch
if [ $PUBLISH -gt 0 ]; then
    # Set the name of the folder that will be created in the parent
    # folder of your repo folder, and which will temporarily
    # hold the generated content.
    TEMP_FOLDER="_gh-pages-temp"
    MASTER_BRANCH="main"
    DEPLOY_BRANCH="gh-pages"

    vrb "# INFO: Checking git branch"
    if [ "$(git rev-parse --symbolic-full-name --abbrev-ref HEAD)" == $MASTER_BRANCH ]; then
        vrb "# INFO: Storing the last commit message from $MASTER_BRANCH"
        LAST_MSG=$(git show -s --format=%s $MASTER_BRANCH)
        vrb "# INFO: Last commit message from $MASTER_BRANCH: $LAST_MSG"

        vrb "# INFO: Starting production build"
        JEKYLL_ENV=production build

        vrb "# INFO: Moving site to temp"
        mv _site ../${TEMP_FOLDER}

        vrb "# INFO: Checking out $DEPLOY_BRANCH"
        git checkout $DEPLOY_BRANCH
        vrb "# INFO: Removing contents"
        rm -rf *

        vrb "# INFO: Copying the site content"
        cp -r ../${TEMP_FOLDER}/* .
        rm -rf ../${TEMP_FOLDER}

        out "# INFO: Commiting to $DEPLOY_BRANCH"
        git add -A
        git commit -m "Built \`$LAST_MSG\`"
        git push

        vrb "# INFO: Returning to the master branch"
        git checkout $MASTER_BRANCH
    else
        err "# ERROR: Not $MASTER_BRANCH branch. Skipping build"
    fi
fi

if [ $GOTW -gt 0 ]; then
    [ $GOTW_WEEK -gt 0 ] || die "# ERROR: GOTW Week \"$GOTW_WEEK\" invalid"
    [[ $GOTW_DATE =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]] || die "# ERROR: GOTW Date \"$GOTW_DATE\" invalid"
    [[ ! -z $GOTW_TEAM1 ]] || die "# ERROR: GOTW Team1 \"$GOTW_TEAM1\" invalid"
    [[ ! -z $GOTW_TEAM2 ]] || die "# ERROR: GOTW Team2 \"$GOTW_TEAM2\" invalid"
    vrb "# INFO: GAME OF THE WEEK draft being created: Week $GOTW_WEEK, Date $GOTW_DATE, TEAM1 $GOTW_TEAM1, TEAM2 $GOTW_TEAM2"
    ansible localhost -m template \
      -a "src=$(pwd)/_templates/GOTW.j2 dest=$(pwd)/_drafts/$GOTW_DATE-GOTW-$GOTW_WEEK-$GOTW_TEAM1-$GOTW_TEAM2.md" \
      -e "GOTW_WEEK=$GOTW_WEEK GOTW_DATE=$GOTW_DATE GOTW_TEAM1=$GOTW_TEAM1 GOTW_TEAM2=$GOTW_TEAM2"
fi
